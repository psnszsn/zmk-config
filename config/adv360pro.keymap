#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    combos {
        compatible = "zmk,combos";

        esc {
            timeout-ms = <100>;
            key-positions = <30 31 32>;
            bindings = <&kp ESCAPE>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        excl {
            bindings = <&kp EXCLAMATION>;
            key-positions = <15 29>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <17 31>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        dollar {
            bindings = <&kp DLLR>;
            key-positions = <18 32>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <30 16>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <19 33>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <22 40>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <23 41>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        mul {
            bindings = <&kp KP_MULTIPLY>;
            key-positions = <24 42>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        and {
            bindings = <&kp AMPERSAND>;
            key-positions = <25 43>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <41 55>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        under {
            bindings = <&kp UNDERSCORE>;
            key-positions = <54 40>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        eql {
            bindings = <&kp EQUAL>;
            key-positions = <32 50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        tilda {
            bindings = <&kp TILDE>;
            key-positions = <33 51>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <29 47>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <29 30>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <44 43>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        capsw {
            bindings = <&caps_word>;
            key-positions = <31 42>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <26 44>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        d-quote {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <44 58>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };
    };

    macros {
        gif: gif {
            label = "giphy";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp N2>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp G &kp I &kp F>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 46 47 48 49 50 51 60 61 62 63 64 0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 46 47 48 49 50 51 60 61 62 63 64 65 35 36 52 65 66 67 37 38 53 68 69 70>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <35 65 35 36 52 65 66 67 37 53 68 69 70 42 22 23 24 25 26 40 41 42 43 44 54 55 56 57 58 71 72 73 7 8 9 10 11 12 13 21 22 23 24 25 26 27 38 39 40 41 42 43 44 45 54 55 56 57 58 59 69 70 71 72 73 74 75>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp EQUAL  &kp N1           &kp N2           &kp N3             &kp N4        &kp N5  &tog 1                                                                            &mo 3  &kp N6  &kp N7        &kp N8              &kp N9           &kp N0               &kp MINUS
&kp TAB    &kp Q            &kp W            &kp E              &kp R         &kp T   &none                                                                             &none  &kp Y   &kp U         &kp I               &kp O            &kp P                &kp BSLH
&kp ESC    &hml LEFT_GUI A  &hml LEFT_ALT S  &hml LEFT_SHIFT D  &hml LCTRL F  &kp G   &none            &kp LCTRL  &kp RIGHT_ALT    &kp LGUI   &kp RCTRL                 &none  &kp H   &hmr RCTRL J  &hmr RIGHT_SHIFT K  &hmr LEFT_ALT L  &hmr RIGHT_WIN SEMI  &kp SQT
&kp LSHFT  &kp Z            &kp X            &kp C              &kp V         &kp B                               &kp HOME         &kp PG_UP                                   &kp N   &kp M         &kp COMMA           &kp DOT          &kp FSLH             &kp RSHFT
&mo 2      &kp GRAVE        &kp CAPS         &kp LEFT           &kp RIGHT                     &kp ESC  &kp SPACE  &kp END          &kp PG_DN  &kp ENTER  &kp BACKSPACE                 &kp DOWN      &kp UP              &kp LBKT         &kp RBKT             &mo 2
            >;
        };

        keypad {
            bindings = <
&none      &kp N1     &kp N2    &kp N3    &kp N4     &kp N5  &trans                                                               &mo 3  &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
&kp TAB    &kp Q      &kp W     &kp E     &kp R      &kp T   &none                                                                &none  &kp Y   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp BSLH
&kp ESC    &none      &kp S     &kp D     &kp F      &kp G   &none          &kp LCTRL  &kp LALT    &kp LGUI   &kp RCTRL           &none  &kp H   &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &kp SQT
&kp LSHFT  &kp Z      &kp X     &kp C     &kp V      &kp B                             &kp HOME    &kp PG_UP                             &kp N   &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &kp RSHFT
&mo 2      &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT                  &none  &none      &kp END     &kp PG_DN  &kp ENTER  &kp DEL                 &none       &kp KP_N0     &kp KP_DOT     &none            &mo 2
            >;
        };

        fn {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &tog 1                                                     &mo 3  &kp F7    &kp F8    &kp F9  &kp F10    &kp F11  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans  &none                                                      &none  &trans    &trans    &trans  &trans     &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &none           &trans  &trans    &trans  &trans           &none  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans                          &trans    &trans                          &trans    &trans    &trans  &trans     &trans   &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans    &trans  &trans  &kp DEL                   &trans    &trans  &trans     &trans   &trans
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                                        &trans       &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                                                  &bootloader  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none               &none  &none    &bt BT_CLR  &none                        &kp RS(B)    &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none                                    &none    &none                                                 &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                                    &none  &none  &none    &none       &bl BL_TOG  &rgb_ug RGB_TOG                      &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };
    };
};

// vim: commentstring=//%s

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE   0
#define RAISE  1
#define LOWER  2
#define ADJUST 3

&led_strip { chain-length = <21>; };

&sensors {
    left_encoder { triggers-per-rotation = <15>; };

    right_encoder { triggers-per-rotation = <15>; };
};

&lt {
    quick-tap-ms = <200>;
    require-prior-idle-ms = <150>;
    tapping-term-ms = <280>;
    hold-trigger-on-release;
    flavor = "balanced";
};

/ {
    behaviors {
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <10 0 1 11 22 23 2 3 13 25 4 12 14 24 36 37 15 38 27 26 28 39 40 41 42 43>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <32 33 34 35 36 5 7 16 6 17 8 18 29 30 19 9 31 38 37 41 39 40 41 42 43 20 21>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        esc {
            timeout-ms = <100>;
            key-positions = <12 13 14>;
            bindings = <&kp ESCAPE>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        excl {
            bindings = <&kp EXCLAMATION>;
            key-positions = <0 11>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <2 13>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        dollar {
            bindings = <&kp DLLR>;
            key-positions = <3 14>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <1 12>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <4 15>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <5 16>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <6 17>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        mul {
            bindings = <&kp KP_MULTIPLY>;
            key-positions = <7 18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        and {
            bindings = <&kp AMPERSAND>;
            key-positions = <8 19>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <17 31>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        under {
            bindings = <&kp UNDERSCORE>;
            key-positions = <16 30>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        eql {
            bindings = <&kp EQUAL>;
            key-positions = <14 26>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        tilda {
            bindings = <&kp TILDE>;
            key-positions = <27 15>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <11 23>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <19 20>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        capsw {
            bindings = <&caps_word>;
            key-positions = <13 18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <9 20>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        d-quote {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <34 20>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        under2 {
            bindings = <&kp UNDERSCORE>;
            key-positions = <31 32>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        bracket_left {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <27 26>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        bracket_right {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <30 31>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        paren_left {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <15 14>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        paren_right {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <16 17>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        brace_left {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <3 4>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        brace_right {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <5 6>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };
    };

    macros {
        macro_closetab: macro_closetab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp F4>,
                <&macro_release>,
                <&kp LCTRL>;
        };

        macro_lasttab: macro_lasttab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp LS(T)>,
                <&macro_release>,
                <&kp LCTRL>;
        };

        macro_terminal: macro_terminal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp LA(T)>,
                <&macro_release>,
                <&kp LCTRL>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak-dh {
            bindings = <
           &kp Q        &kp W        &kp F         &kp P         &kp B                            &kp J    &kp L          &kp U         &kp Y        &kp SEMICOLON
&kp EXCL   &hml LGUI A  &hml LALT R  &hml LSHFT S  &hml LCTRL T  &kp G                            &kp M    &hmr RCTRL N   &hmr RSHFT E  &hmr LALT I  &hmr RGUI O    &kp SQT
&kp GLOBE  &kp Z        &lt 4 X      &kp C         &lt 1 D       &kp V      &kp C_MUTE  &kp K_PP  &kp K    &kp H          &kp COMMA     &kp DOT      &kp SLASH      &kp BACKSLASH
                                     &kp DEL       &lt 1 ESCAPE  &kp SPACE  &none       &none     &kp RET  &kp BACKSPACE  &lt 2 A
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp C_AC_FORWARD C_AC_BACK>;
        };

        num_layer {
            bindings = <
        &none  &none  &none   &none   &kp LBRC                &kp RBRC  &kp N7  &kp N8  &kp N9  &kp N0
&none   &none  &none  &none   &to 0   &kp LPAR                &kp RPAR  &kp N4  &kp N5  &kp N6  &kp DOT          &none
&tog 5  &none  &none  &none   &to 5   &kp LBKT  &kp A  &none  &kp RBKT  &kp N1  &kp N2  &kp N3  &kp KP_MULTIPLY  &trans
                      &trans  &trans  &trans    &none  &none  &mo 3     &trans  &trans
            >;
        };

        sim_layer {
            bindings = <
        &kp EXCL      &kp AT           &kp HASH  &kp DLLR  &kp PRCNT                &tog 0        &to 1         &none          &kp SQT           &kp DQT
&none   &none         &trans           &none     &trans    &trans                   &kp LEFT      &kp DOWN      &kp UP         &kp RIGHT         &kp COLON  &none
&tog 5  &kp C_VOL_DN  &kp C_VOLUME_UP  &trans    &trans    &trans     &none  &none  &kp C_VOL_DN  &kp C_VOL_UP  &kp LESS_THAN  &kp GREATER_THAN  &kp BSLH   &trans
                                       &trans    &none     &mo 3      &none  &none  &trans        &kp C_PP      &trans
            >;
        };

        adjust_layer {
            bindings = <
       &sys_reset    &bt BT_CLR    &out OUT_TOG    &kp K         &none                       &none           &kp F7  &kp F8  &kp F9  &kp F12
&none  &bootloader   &kp LEFT_ALT  &kp LEFT_SHIFT  &kp LCTRL     &none                       &kp LC(LA(F2))  &kp F4  &kp F5  &kp F6  &kp F11  &none
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3  &bt BT_SEL 4  &none  &none  &kp LC(LA(F1))  &kp F1  &kp F2  &kp F3  &kp F10  &none
                                   &none           &none         &none         &none  &none  &none           &none   &none
            >;
        };

        alt+arrows {
            bindings = <
       &none  &none  &none       &none      &none                &kp LA(LEFT)  &kp PAGE_DOWN  &kp PAGE_UP  &kp LA(RIGHT)  &none
&none  &none  &none  &kp LSHIFT  &kp LCTRL  &none                &kp LEFT      &kp DOWN       &kp UP       &kp RIGHT      &none  &none
&none  &none  &none  &none       &none      &none  &none  &none  &none         &none          &none        &none          &none  &none
                     &none       &none      &none  &none  &none  &none         &none          &none
            >;
        };

        mouse {
            bindings = <
        &none  &none           &mmv MOVE_UP    &none            &none                &none           &none           &none         &none            &none
&none   &none  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none                &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &none  &none
&tog 5  &none  &none           &none           &none            &none  &none  &none  &none           &none           &none         &none            &none  &none
                               &none           &none            &none  &none  &none  &mkp LCLK       &mkp RCLK       &none
            >;
        };

        //         lower_layer {
        //             bindings = <
        //            &kp F1    &kp F2  &kp F3     &kp F4    &kp F5                            &kp F6     &kp F7    &kp F8     &kp F9     &kp F10
        // &kp MINUS  &kp EXCL  &kp AT  &kp POUND  &kp DLLR  &kp PRCNT                         &kp CARET  &kp AMPS  &kp GRAVE  &kp TILDE  &kp EQUAL  &kp KP_PLUS
        // &kp UNDER  &kp N1    &kp N2  &kp N3     &kp N4    &kp N5     &kp C_MUTE  &kp K_PP   &kp N6     &kp N7    &kp N8     &kp N9     &kp N0     &kp KP_MULTIPLY
        //                              &trans     &trans    &trans     &mo LSHFT   &mo RSHFT  &trans     &trans    &trans
        //             >;
        //             sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp C_NEXT C_PREV>;
        //         };
    };
};

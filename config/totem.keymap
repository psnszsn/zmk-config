#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

&lt {
    quick-tap-ms = <200>;
    require-prior-idle-ms = <150>;
    tapping-term-ms = <280>;
    hold-trigger-on-release;
    flavor = "balanced";
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        esc {
            timeout-ms = <100>;
            key-positions = <11 12 13>;
            bindings = <&kp ESCAPE>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        excl {
            bindings = <&kp EXCLAMATION>;
            key-positions = <0 10>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <2 12>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        dollar {
            bindings = <&kp DLLR>;
            key-positions = <3 13>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <1 11>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <4 14>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <5 15>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <6 16>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        mul {
            bindings = <&kp KP_MULTIPLY>;
            key-positions = <7 17>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        and {
            bindings = <&kp AMPERSAND>;
            key-positions = <8 18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <16 27>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        under {
            bindings = <&kp UNDERSCORE>;
            key-positions = <15 26>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        eql {
            bindings = <&kp EQUAL>;
            key-positions = <13 24>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        tilda {
            bindings = <&kp TILDE>;
            key-positions = <14 25>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <10 21>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <10 11>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <19 18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        capsw {
            bindings = <&caps_word>;
            key-positions = <12 17>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <9 19>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        d-quote {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <19 30>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };
    };

    macros {
        gif: gif {
            label = "giphy";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp N2>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp G &kp I &kp F>;
        };
    };

    behaviors {
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <20 21 10 0 1 11 22 23 2 3 13 25 4 12 14 24 32 33 34 35 36 37>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <32 33 34 35 37 36 26 15 5 7 16 6 27 28 17 8 18 29 30 19 9 31>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
           &kp Q        &kp W        &kp E         &kp R         &kp T        &kp Y    &kp U          &kp I         &kp O        &kp P
           &hml LGUI A  &hml LALT S  &hml LSHFT D  &hml LCTRL F  &kp G        &kp H    &hmr RCTRL J   &hmr RSHFT K  &hmr LALT L  &hmr RGUI SEMICOLON
&kp GLOBE  &kp Z        &lt 4 X      &kp C         &kp V         &kp B        &kp N    &kp M          &kp COMMA     &kp DOT      &kp SLASH            &kp BACKSLASH
                                     &kp DEL       &lt 1 ESCAPE  &kp SPACE    &kp RET  &kp BACKSPACE  &lt 2 A
            >;
        };

        nav_layer {
            bindings = <
        &kp ESC    &bt BT_CLR  &kp UP    &kp EQUAL  &kp LBRC    &kp RBRC  &kp N7  &kp N8   &kp N9  &kp KP_PLUS
        &kp LSHFT  &kp LEFT    &kp DOWN  &kp RIGHT  &kp LPAR    &kp RPAR  &kp N4  &kp N5   &kp N6  &kp KP_MINUS
&tog 5  &kp DEL    &kp PG_UP   &kp CAPS  &kp PG_DN  &kp LBKT    &kp RBKT  &kp N1  &kp N2   &kp N3  &kp KP_MULTIPLY  &trans
                               &trans    &trans     &trans      &mo 3     &kp N0  &kp DOT
            >;
        };

        sim_layer {
            bindings = <
        &kp EXCL      &kp AT           &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET     &kp AMPS      &kp RA(U)      &kp SQT           &kp DQT
        &none         &trans           &none     &trans    &trans       &kp LEFT      &kp DOWN      &kp UP         &kp RIGHT         &kp COLON
&tog 5  &kp C_VOL_DN  &kp C_VOLUME_UP  &trans    &trans    &trans       &kp C_VOL_DN  &kp C_VOL_UP  &kp LESS_THAN  &kp GREATER_THAN  &kp BSLH   &trans
                                       &trans    &gif      &mo 3        &trans        &kp C_PP      &trans
            >;
        };

        adjust_layer {
            bindings = <
       &sys_reset    &bt BT_CLR    &out OUT_TOG  &kp K         &none           &none  &kp F7  &kp F8  &kp F9  &kp F12
       &bootloader   &none         &none         &none         &none           &none  &kp F4  &kp F5  &kp F6  &kp F11
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none  &kp F1  &kp F2  &kp F3  &kp F10  &none
                                   &none         &none         &none           &none  &none   &none
            >;
        };

        alt+arrows {
            bindings = <
       &none  &none  &none       &none      &none    &kp LA(LEFT)  &kp PAGE_DOWN  &kp PAGE_UP  &kp LA(RIGHT)  &none
       &none  &none  &kp LSHIFT  &kp LCTRL  &none    &kp LEFT      &kp DOWN       &kp UP       &kp RIGHT      &none
&none  &none  &none  &none       &none      &none    &none         &none          &none        &none          &none  &none
                     &none       &none      &none    &none         &none          &none
            >;
        };

        mouse {
            bindings = <
        &none  &none           &mmv MOVE_UP    &none            &none    &none           &none           &none         &none            &none
        &none  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &none
&tog 5  &none  &none           &none           &none            &none    &none           &none           &none         &none            &none  &none
                               &none           &none            &none    &mkp LCLK       &mkp RCLK       &none
            >;
        };
    };
};
